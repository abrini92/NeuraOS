[tool.poetry]
name = "neura"
version = "0.1.0"
description = "Local-first Cognitive Operating System"
authors = ["Abderrahim <abderrahim@neura.tech>"]
readme = "README.md"
license = "Proprietary"
packages = [{include = "neura"}]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
fastapi = "^0.119.0"
uvicorn = {extras = ["standard"], version = "^0.37.0"}
pydantic = "^2.12.0"
pydantic-settings = "^2.0.0"

# LLM & AI
llama-cpp-python = "^0.2.0"

# Memory & Storage
qdrant-client = "^1.15.0"
sqlalchemy = "^2.0.0"

# Security
cryptography = "^42.0.0"
argon2-cffi = "^23.0.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}

# CLI & TUI
typer = {extras = ["all"], version = "^0.9.0"}
rich = "^13.7.0"
prompt-toolkit = "^3.0.0"

# Logging & Observability
opentelemetry-sdk = "^1.38.0"
opentelemetry-api = "^1.38.0"

# Utilities
python-dotenv = "^1.0.0"
httpx = "^0.28.0"
pyautogui = "^0.9.54"
sounddevice = "^0.5.2"
scipy = "^1.16.2"
numpy = "^2.3.4"
python-multipart = "^0.0.20"
openai-whisper = "^20250625"

# Daemon & UI
rumps = {version = "^0.4.0", markers = "sys_platform == 'darwin'"}
pynput = "^1.7.6"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
black = "^24.0.0"
ruff = "^0.1.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.5.0"

[tool.poetry.scripts]
neura = "neura.cli_working:main"
neura-api = "neura.core.api:main"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "F", "I", "N", "W", "UP"]
ignore = ["E501"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=neura --cov-report=term-missing --cov-report=html"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
